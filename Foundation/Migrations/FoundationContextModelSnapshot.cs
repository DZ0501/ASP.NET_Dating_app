// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Foundation.Migrations
{
    [DbContext(typeof(FoundationContext))]
    partial class FoundationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Foundation.Areas.Identity.Data.FoundationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Foundation.Models.Alcohol_model", b =>
                {
                    b.Property<int>("Alcohol_modelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("alcohol_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Alcohol_modelId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.HasKey("Alcohol_modelId");

                    b.ToTable("Alcohol");

                    b.HasData(
                        new
                        {
                            AlcoholmodelId = 1,
                            Type = "Never"
                        },
                        new
                        {
                            AlcoholmodelId = 2,
                            Type = "Occasionally"
                        },
                        new
                        {
                            AlcoholmodelId = 3,
                            Type = "Often"
                        },
                        new
                        {
                            AlcoholmodelId = 4,
                            Type = "Daily"
                        });
                });

            modelBuilder.Entity("Foundation.Models.Business_model", b =>
                {
                    b.Property<int>("Business_modelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("business_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Business_modelId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("address");

                    b.Property<string>("Localization")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("localization");

                    b.Property<decimal>("NIP")
                        .HasMaxLength(10)
                        .HasColumnType("decimal(20,0)")
                        .HasColumnName("nip");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("name");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("postcode");

                    b.HasKey("Business_modelId");

                    b.ToTable("Business");

                    b.HasData(
                        new
                        {
                            BusinessmodelId = 1,
                            Address = "ul. Na wzgórzu 42",
                            Localization = "Rabka Zdrój",
                            NIP = 9931742334m,
                            Name = "Blachotrapez Sp. z o.o",
                            Postcode = "30-215"
                        },
                        new
                        {
                            BusinessmodelId = 2,
                            Address = "ul. Krakowska 12",
                            Localization = "Nowy Sącz",
                            NIP = 7233422312m,
                            Name = "Oknoplast Sp. z o.o.",
                            Postcode = "32-712"
                        },
                        new
                        {
                            BusinessmodelId = 3,
                            Address = "ul. Krótka 32",
                            Localization = "Warszawa",
                            NIP = 9256345423m,
                            Name = "Evenea Sp. z o.o.",
                            Postcode = "02-250"
                        },
                        new
                        {
                            BusinessmodelId = 4,
                            Address = "ul. Informatyków 1",
                            Localization = "Kraków",
                            NIP = 6722341245m,
                            Name = "Comarch S.A.",
                            Postcode = "30-230"
                        },
                        new
                        {
                            BusinessmodelId = 5,
                            Address = "ul. Rakowicka 27",
                            Localization = "Kraków",
                            NIP = 9913451273m,
                            Name = "Uniwersytet Ekonomczny w Krakowie",
                            Postcode = "30-118"
                        },
                        new
                        {
                            BusinessmodelId = 6,
                            Address = "ul. Lipowa 3",
                            Localization = "Kraków",
                            NIP = 6792933459m,
                            Name = "Neostrain Sp. z o.o.",
                            Postcode = "30-702"
                        },
                        new
                        {
                            BusinessmodelId = 7,
                            Address = "ul. Poznańska 18",
                            Localization = "Warszawa",
                            NIP = 7452342345m,
                            Name = "Polkomtel S.A.",
                            Postcode = "00-212"
                        });
                });

            modelBuilder.Entity("Foundation.Models.Education_model", b =>
                {
                    b.Property<int>("Education_modelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("education_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Education_modelId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.HasKey("Education_modelId");

                    b.ToTable("Education");

                    b.HasData(
                        new
                        {
                            EducationmodelId = 1,
                            Type = "Primary"
                        },
                        new
                        {
                            EducationmodelId = 2,
                            Type = "Secondary"
                        },
                        new
                        {
                            EducationmodelId = 3,
                            Type = "Higher"
                        });
                });

            modelBuilder.Entity("Foundation.Models.Interest_model", b =>
                {
                    b.Property<int>("Interest_modelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("interest_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Interest_modelId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.HasKey("Interest_modelId");

                    b.ToTable("Interest");

                    b.HasData(
                        new
                        {
                            InterestmodelId = 1,
                            Type = "Motorcycles"
                        },
                        new
                        {
                            InterestmodelId = 2,
                            Type = "Cars"
                        },
                        new
                        {
                            InterestmodelId = 3,
                            Type = "Music"
                        },
                        new
                        {
                            InterestmodelId = 4,
                            Type = "Food"
                        },
                        new
                        {
                            InterestmodelId = 5,
                            Type = "Computer games"
                        },
                        new
                        {
                            InterestmodelId = 6,
                            Type = "Animals"
                        },
                        new
                        {
                            InterestmodelId = 7,
                            Type = "Movies"
                        },
                        new
                        {
                            InterestmodelId = 8,
                            Type = "TV series"
                        },
                        new
                        {
                            InterestmodelId = 9,
                            Type = "Technology"
                        },
                        new
                        {
                            InterestmodelId = 10,
                            Type = "Traveling"
                        },
                        new
                        {
                            InterestmodelId = 11,
                            Type = "Cooking"
                        },
                        new
                        {
                            InterestmodelId = 12,
                            Type = "Reading"
                        },
                        new
                        {
                            InterestmodelId = 13,
                            Type = "Nature"
                        });
                });

            modelBuilder.Entity("Foundation.Models.Person_model", b =>
                {
                    b.Property<int>("Person_modelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("person_id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Person_modelId"));

                    b.Property<int>("Age")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("age")
                        .HasColumnOrder(4);

                    b.Property<int>("AlcoholId")
                        .HasMaxLength(2)
                        .HasColumnType("int")
                        .HasColumnName("alcohol_id");

                    b.Property<int?>("BusinessId")
                        .HasMaxLength(2)
                        .HasColumnType("int")
                        .HasColumnName("business_id");

                    b.Property<int>("EducationId")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("education_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("first_name")
                        .HasColumnOrder(2);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("gender")
                        .HasColumnOrder(1);

                    b.Property<int?>("InterestFirstId")
                        .HasColumnType("int")
                        .HasColumnName("interest_1_id")
                        .HasColumnOrder(6);

                    b.Property<int?>("InterestSecondId")
                        .HasColumnType("int")
                        .HasColumnName("interest_2_id")
                        .HasColumnOrder(7);

                    b.Property<int?>("InterestThirdId")
                        .HasColumnType("int")
                        .HasColumnName("interest_3_id")
                        .HasColumnOrder(8);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("last_name")
                        .HasColumnOrder(3);

                    b.Property<string>("Localization")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("localization")
                        .HasColumnOrder(5);

                    b.Property<string>("PetName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("pet_name");

                    b.Property<int?>("PetTypeId")
                        .HasMaxLength(2)
                        .HasColumnType("int")
                        .HasColumnName("pet_type_id");

                    b.Property<int>("RelationshipStatusId")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("relationship_status_id");

                    b.Property<int>("ReligionId")
                        .HasMaxLength(2)
                        .HasColumnType("int")
                        .HasColumnName("religion_id");

                    b.Property<int>("SmokingId")
                        .HasMaxLength(2)
                        .HasColumnType("int")
                        .HasColumnName("smoking_id");

                    b.Property<int>("ZodiacSignId")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("zodiac_sign_id");

                    b.HasKey("Person_modelId");

                    b.HasIndex("AlcoholId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("EducationId");

                    b.HasIndex("InterestFirstId");

                    b.HasIndex("InterestSecondId");

                    b.HasIndex("InterestThirdId");

                    b.HasIndex("PetTypeId");

                    b.HasIndex("RelationshipStatusId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("SmokingId");

                    b.HasIndex("ZodiacSignId");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            PersonmodelId = 1,
                            Age = 20,
                            AlcoholId = 1,
                            BusinessId = 2,
                            EducationId = 2,
                            FirstName = "Paweł",
                            Gender = "m",
                            InterestFirstId = 4,
                            InterestSecondId = 2,
                            InterestThirdId = 3,
                            LastName = "Urbański",
                            Localization = "Kraków",
                            PetName = "Dyzio",
                            PetTypeId = 2,
                            RelationshipStatusId = 1,
                            ReligionId = 1,
                            SmokingId = 1,
                            ZodiacSignId = 3
                        },
                        new
                        {
                            PersonmodelId = 2,
                            Age = 25,
                            AlcoholId = 3,
                            BusinessId = 4,
                            EducationId = 3,
                            FirstName = "Damian",
                            Gender = "m",
                            InterestFirstId = 2,
                            InterestSecondId = 1,
                            InterestThirdId = 3,
                            LastName = "Jawor",
                            Localization = "Wadowice",
                            PetName = "Piorun",
                            PetTypeId = 1,
                            RelationshipStatusId = 1,
                            ReligionId = 1,
                            SmokingId = 4,
                            ZodiacSignId = 1
                        },
                        new
                        {
                            PersonmodelId = 3,
                            Age = 21,
                            AlcoholId = 1,
                            BusinessId = 2,
                            EducationId = 2,
                            FirstName = "Borys",
                            Gender = "m",
                            InterestFirstId = 3,
                            InterestSecondId = 1,
                            InterestThirdId = 2,
                            LastName = "Pawlak",
                            Localization = "Toruń",
                            RelationshipStatusId = 1,
                            ReligionId = 1,
                            SmokingId = 2,
                            ZodiacSignId = 2
                        },
                        new
                        {
                            PersonmodelId = 4,
                            Age = 18,
                            AlcoholId = 3,
                            EducationId = 1,
                            FirstName = "Kajetan",
                            Gender = "m",
                            InterestFirstId = 2,
                            InterestSecondId = 3,
                            InterestThirdId = 1,
                            LastName = "Kowalski",
                            Localization = "Nowy Sącz",
                            PetName = "Saba",
                            PetTypeId = 1,
                            RelationshipStatusId = 3,
                            ReligionId = 1,
                            SmokingId = 2,
                            ZodiacSignId = 1
                        },
                        new
                        {
                            PersonmodelId = 5,
                            Age = 30,
                            AlcoholId = 1,
                            BusinessId = 5,
                            EducationId = 3,
                            FirstName = "Marcel",
                            Gender = "m",
                            InterestFirstId = 9,
                            InterestSecondId = 10,
                            InterestThirdId = 5,
                            LastName = "Bąk",
                            Localization = "Warszawa",
                            PetName = "Ares",
                            PetTypeId = 2,
                            RelationshipStatusId = 2,
                            ReligionId = 3,
                            SmokingId = 2,
                            ZodiacSignId = 7
                        },
                        new
                        {
                            PersonmodelId = 6,
                            Age = 20,
                            AlcoholId = 1,
                            BusinessId = 2,
                            EducationId = 2,
                            FirstName = "Jagoda",
                            Gender = "w",
                            InterestFirstId = 11,
                            InterestSecondId = 12,
                            InterestThirdId = 13,
                            LastName = "Lis",
                            Localization = "Wadowice",
                            PetName = "Eliza",
                            PetTypeId = 3,
                            RelationshipStatusId = 1,
                            ReligionId = 1,
                            SmokingId = 2,
                            ZodiacSignId = 3
                        },
                        new
                        {
                            PersonmodelId = 7,
                            Age = 27,
                            AlcoholId = 3,
                            BusinessId = 4,
                            EducationId = 3,
                            FirstName = "Lara",
                            Gender = "w",
                            InterestFirstId = 2,
                            InterestSecondId = 1,
                            InterestThirdId = 3,
                            LastName = "Czerwik",
                            Localization = "Kraków",
                            PetName = "Beza",
                            PetTypeId = 2,
                            RelationshipStatusId = 1,
                            ReligionId = 1,
                            SmokingId = 4,
                            ZodiacSignId = 1
                        },
                        new
                        {
                            PersonmodelId = 8,
                            Age = 23,
                            AlcoholId = 1,
                            BusinessId = 2,
                            EducationId = 2,
                            FirstName = "Wiktoria",
                            Gender = "w",
                            InterestFirstId = 3,
                            InterestSecondId = 1,
                            InterestThirdId = 2,
                            LastName = "Zakrzewska",
                            Localization = "Warszawa",
                            RelationshipStatusId = 1,
                            ReligionId = 1,
                            SmokingId = 3,
                            ZodiacSignId = 2
                        },
                        new
                        {
                            PersonmodelId = 9,
                            Age = 20,
                            AlcoholId = 3,
                            EducationId = 1,
                            FirstName = "Helena",
                            Gender = "w",
                            InterestFirstId = 2,
                            InterestSecondId = 3,
                            InterestThirdId = 1,
                            LastName = "Pikol",
                            Localization = "Nowy Sącz",
                            PetName = "Agrest",
                            PetTypeId = 1,
                            RelationshipStatusId = 3,
                            ReligionId = 2,
                            SmokingId = 2,
                            ZodiacSignId = 1
                        },
                        new
                        {
                            PersonmodelId = 10,
                            Age = 32,
                            AlcoholId = 3,
                            BusinessId = 1,
                            EducationId = 1,
                            FirstName = "Natalia",
                            Gender = "w",
                            InterestFirstId = 2,
                            InterestSecondId = 3,
                            InterestThirdId = 1,
                            LastName = "Sobczak",
                            Localization = "Sandomierz",
                            PetName = "Fafik",
                            PetTypeId = 1,
                            RelationshipStatusId = 3,
                            ReligionId = 2,
                            SmokingId = 2,
                            ZodiacSignId = 1
                        });
                });

            modelBuilder.Entity("Foundation.Models.Pet_model", b =>
                {
                    b.Property<int>("Pet_modelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pet_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pet_modelId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.HasKey("Pet_modelId");

                    b.ToTable("Pet");

                    b.HasData(
                        new
                        {
                            PetmodelId = 1,
                            Type = "Dog"
                        },
                        new
                        {
                            PetmodelId = 2,
                            Type = "Cat"
                        },
                        new
                        {
                            PetmodelId = 3,
                            Type = "Guinea pig"
                        });
                });

            modelBuilder.Entity("Foundation.Models.Relationship_status_model", b =>
                {
                    b.Property<int>("Relationship_status_modelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("relationship_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Relationship_status_modelId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.HasKey("Relationship_status_modelId");

                    b.ToTable("Relationship_status");

                    b.HasData(
                        new
                        {
                            RelationshipstatusmodelId = 1,
                            Type = "Free"
                        },
                        new
                        {
                            RelationshipstatusmodelId = 2,
                            Type = "Taken"
                        },
                        new
                        {
                            RelationshipstatusmodelId = 3,
                            Type = "Other"
                        });
                });

            modelBuilder.Entity("Foundation.Models.Religion_model", b =>
                {
                    b.Property<int>("Religion_modelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("religion_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Religion_modelId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.HasKey("Religion_modelId");

                    b.ToTable("Religion");

                    b.HasData(
                        new
                        {
                            ReligionmodelId = 1,
                            Type = "Christianity"
                        },
                        new
                        {
                            ReligionmodelId = 2,
                            Type = "Islam"
                        },
                        new
                        {
                            ReligionmodelId = 3,
                            Type = "Hinduism"
                        },
                        new
                        {
                            ReligionmodelId = 4,
                            Type = "Buddhism"
                        });
                });

            modelBuilder.Entity("Foundation.Models.Smoking_model", b =>
                {
                    b.Property<int>("Smoking_modelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("smoking_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Smoking_modelId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.HasKey("Smoking_modelId");

                    b.ToTable("Smoking");

                    b.HasData(
                        new
                        {
                            SmokingmodelId = 1,
                            Type = "Never"
                        },
                        new
                        {
                            SmokingmodelId = 2,
                            Type = "Occasionally"
                        },
                        new
                        {
                            SmokingmodelId = 3,
                            Type = "Often"
                        },
                        new
                        {
                            SmokingmodelId = 4,
                            Type = "Daily"
                        });
                });

            modelBuilder.Entity("Foundation.Models.Zodiac_sign_model", b =>
                {
                    b.Property<int>("Zodiac_sign_modelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("zodiac_sign_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Zodiac_sign_modelId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.HasKey("Zodiac_sign_modelId");

                    b.ToTable("Zodiac_sign");

                    b.HasData(
                        new
                        {
                            ZodiacsignmodelId = 1,
                            Type = "Aquarius"
                        },
                        new
                        {
                            ZodiacsignmodelId = 2,
                            Type = "Pisces"
                        },
                        new
                        {
                            ZodiacsignmodelId = 3,
                            Type = "Aries"
                        },
                        new
                        {
                            ZodiacsignmodelId = 4,
                            Type = "Taurus"
                        },
                        new
                        {
                            ZodiacsignmodelId = 5,
                            Type = "Gemini"
                        },
                        new
                        {
                            ZodiacsignmodelId = 6,
                            Type = "Cancer"
                        },
                        new
                        {
                            ZodiacsignmodelId = 7,
                            Type = "Leo"
                        },
                        new
                        {
                            ZodiacsignmodelId = 8,
                            Type = "Virgo"
                        },
                        new
                        {
                            ZodiacsignmodelId = 9,
                            Type = "Libra"
                        },
                        new
                        {
                            ZodiacsignmodelId = 10,
                            Type = "Scorpio"
                        },
                        new
                        {
                            ZodiacsignmodelId = 11,
                            Type = "Capricorn"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Foundation.Models.Person_model", b =>
                {
                    b.HasOne("Foundation.Models.Alcohol_model", "Alcohol_model")
                        .WithMany("Person_model")
                        .HasForeignKey("AlcoholId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foundation.Models.Business_model", "Business_model")
                        .WithMany("Person_model")
                        .HasForeignKey("BusinessId");

                    b.HasOne("Foundation.Models.Education_model", "Education_model")
                        .WithMany("Person_model")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foundation.Models.Interest_model", "Interest_first_model")
                        .WithMany("Person_first_models")
                        .HasForeignKey("InterestFirstId");

                    b.HasOne("Foundation.Models.Interest_model", "Interest_second_model")
                        .WithMany("Person_second_models")
                        .HasForeignKey("InterestSecondId");

                    b.HasOne("Foundation.Models.Interest_model", "Interest_third_model")
                        .WithMany("Person_third_models")
                        .HasForeignKey("InterestThirdId");

                    b.HasOne("Foundation.Models.Pet_model", "Pet_model")
                        .WithMany("Person_model")
                        .HasForeignKey("PetTypeId");

                    b.HasOne("Foundation.Models.Relationship_status_model", "Relationship_status_model")
                        .WithMany("Person_model")
                        .HasForeignKey("RelationshipStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foundation.Models.Religion_model", "Religion_model")
                        .WithMany("Person_model")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foundation.Models.Smoking_model", "Smoking_model")
                        .WithMany("Person_model")
                        .HasForeignKey("SmokingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foundation.Models.Zodiac_sign_model", "Zodiac_sign_model")
                        .WithMany("Person_model")
                        .HasForeignKey("ZodiacSignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alcohol_model");

                    b.Navigation("Business_model");

                    b.Navigation("Education_model");

                    b.Navigation("Interest_first_model");

                    b.Navigation("Interest_second_model");

                    b.Navigation("Interest_third_model");

                    b.Navigation("Pet_model");

                    b.Navigation("Relationship_status_model");

                    b.Navigation("Religion_model");

                    b.Navigation("Smoking_model");

                    b.Navigation("Zodiac_sign_model");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Foundation.Areas.Identity.Data.FoundationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Foundation.Areas.Identity.Data.FoundationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Foundation.Areas.Identity.Data.FoundationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Foundation.Areas.Identity.Data.FoundationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Foundation.Models.Alcohol_model", b =>
                {
                    b.Navigation("Person_model");
                });

            modelBuilder.Entity("Foundation.Models.Business_model", b =>
                {
                    b.Navigation("Person_model");
                });

            modelBuilder.Entity("Foundation.Models.Education_model", b =>
                {
                    b.Navigation("Person_model");
                });

            modelBuilder.Entity("Foundation.Models.Interest_model", b =>
                {
                    b.Navigation("Person_first_models");

                    b.Navigation("Person_second_models");

                    b.Navigation("Person_third_models");
                });

            modelBuilder.Entity("Foundation.Models.Pet_model", b =>
                {
                    b.Navigation("Person_model");
                });

            modelBuilder.Entity("Foundation.Models.Relationship_status_model", b =>
                {
                    b.Navigation("Person_model");
                });

            modelBuilder.Entity("Foundation.Models.Religion_model", b =>
                {
                    b.Navigation("Person_model");
                });

            modelBuilder.Entity("Foundation.Models.Smoking_model", b =>
                {
                    b.Navigation("Person_model");
                });

            modelBuilder.Entity("Foundation.Models.Zodiac_sign_model", b =>
                {
                    b.Navigation("Person_model");
                });
#pragma warning restore 612, 618
        }
    }
}
